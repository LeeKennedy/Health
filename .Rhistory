t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
if( equal.variance==FALSE )
{
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
x1 = rnorm(100)
x2 = rnorm(200)
t.test2( mean(x1), mean(x2), sd(x1), sd(x2), 100, 200)
# m1, m2: the sample means
# s1, s2: the sample standard deviations
# n1, n2: the same sizes
# m0: the null value for the difference in means to be tested for. Default is 0.
# equal.variance: whether or not to assume equal variance. Default is FALSE.
t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
if( equal.variance==FALSE )
{
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
x1 = rnorm(100)
x2 = rnorm(200)
t.test2( mean(x1), mean(x2), sd(x1), sd(x2), 100, 200)
# m1, m2: the sample means
# s1, s2: the sample standard deviations
# n1, n2: the same sizes
# m0: the null value for the difference in means to be tested for. Default is 0.
# equal.variance: whether or not to assume equal variance. Default is FALSE.
t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
if( equal.variance==FALSE )
{
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
x1 = rnorm(100)
x2 = rnorm(200)
t.test2( mean(x1), mean(x2), sd(x1), sd(x2), 100, 200)
# m1, m2: the sample means
# s1, s2: the sample standard deviations
# n1, n2: the same sizes
# m0: the null value for the difference in means to be tested for. Default is 0.
# equal.variance: whether or not to assume equal variance. Default is FALSE.
t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
if( equal.variance==FALSE )
{
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
x1 = rnorm(100)
x2 = rnorm(200)
t.test2( mean(x1), mean(x2), sd(x1), sd(x2), 100, 200)
# m1, m2: the sample means
# s1, s2: the sample standard deviations
# n1, n2: the same sizes
# m0: the null value for the difference in means to be tested for. Default is 0.
# equal.variance: whether or not to assume equal variance. Default is FALSE.
t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
if( equal.variance==FALSE )
{
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
x1 = rnorm(100)
x2 = rnorm(200)
t.test2( mean(x1), mean(x2), sd(x1), sd(x2), 100, 200)
# m1, m2: the sample means
# s1, s2: the sample standard deviations
# n1, n2: the same sizes
# m0: the null value for the difference in means to be tested for. Default is 0.
# equal.variance: whether or not to assume equal variance. Default is FALSE.
t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
if( equal.variance==FALSE )
{
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
x1 = rnorm(100)
x2 = rnorm(200)
t.test2( mean(x1), mean(x2), sd(x1), sd(x2), 100, 200)
# m1, m2: the sample means
# s1, s2: the sample standard deviations
# n1, n2: the same sizes
# m0: the null value for the difference in means to be tested for. Default is 0.
# equal.variance: whether or not to assume equal variance. Default is FALSE.
t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
if( equal.variance==FALSE )
{
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
x1 = rnorm(100)
x2 = rnorm(200)
t.test2( mean(x1), mean(x2), sd(x1), sd(x2), 100, 200)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(xlsx)
#data <- read.csv("BP.csv", as.is=TRUE, header=TRUE, skip=18)
data <- read.xlsx("Healthcheck.xlsx",2, startRow=19, header=TRUE)
data1 <- select(data, everything())%>%
mutate(Systolic = as.numeric(as.character(A)),
Diastolic = as.numeric(as.character(B)))%>%
na.omit
data2 <- data1[,c(1,16,17)]
data2$Date <- ymd(data2$Date)
data3 <- gather(data2, Type, Reading, -Date)
plot <- ggplot(data3, aes(Date, Reading, colour = Type)) +
geom_point(size=4, shape=21) +
geom_smooth(lwd=1) +
scale_colour_brewer(palette="Set1") +
theme_bw() +
theme(panel.grid.major = element_line(size = 0.5, color = "grey"),
axis.line = element_line(size = 0.7, color = "black"),
text = element_text(size = 14))
plot
library(ggplot2)
library(XLConnect)
weight <- readWorksheet(loadWorkbook("Healthcheck.xlsx"), sheet=1)
#weight <- read.csv("Healthcheck.csv", header = TRUE)
weight1 <- weight[,c(1,8)]
weight1 <- na.omit(weight1)
weight2 <- weight1[1400:nrow(weight1),]
weight3 <- weight[,c(4,8)]
weight3 <- na.omit(weight3)
weight4 <-weight[,c(1,8:10)]
height <- 1.89
BMI <- (weight4$Weight)/(height^2)
w2h <- weight4$Waist/weight4$Hips
weight5 <- cbind(weight4, BMI,w2h)
dev.off()
#Weight over recent time
ggplot(weight2, aes(Index,Weight)) +
geom_point(colour = "blue", size = 3) +
geom_smooth(method=loess, colour = "darkgreen") +
ggtitle("Weight") +
ylim(85,98)
#Weight over longer time
ggplot(weight1, aes(Index,Weight)) +
geom_point(colour = "blue", size = 2) +
geom_smooth(colour = "darkgreen") +
ggtitle("Weight") +
ylim(85,105)
colors = c(rep("cornflowerblue",9),rep("limegreen",1))
boxplot(Weight ~ Year,
data = weight3,
col = colors)
abline(h=94, lty=2, col="red")
#Waist to Hip Ratio
ggplot(weight5[2400:nrow(weight5),], aes(x = Index, y = w2h)) +
geom_point() +
geom_smooth(colour = "darkgreen") +
ggtitle("Waist to Hip Ratio")
#BMI
ggplot(weight5[2000:nrow(weight5),], aes(x = Index, y = BMI)) +
geom_point() +
geom_smooth(colour = "blue") +
ggtitle("BMI") +
geom_abline(slope=0, intercept=25, lty=2, col="red")
install.packages("XLConnect")
library(ggplot2)
library(XLConnect)
weight <- readWorksheet(loadWorkbook("Healthcheck.xlsx"), sheet=1)
#weight <- read.csv("Healthcheck.csv", header = TRUE)
weight1 <- weight[,c(1,8)]
weight1 <- na.omit(weight1)
weight2 <- weight1[1400:nrow(weight1),]
weight3 <- weight[,c(4,8)]
weight3 <- na.omit(weight3)
weight4 <-weight[,c(1,8:10)]
height <- 1.89
BMI <- (weight4$Weight)/(height^2)
w2h <- weight4$Waist/weight4$Hips
weight5 <- cbind(weight4, BMI,w2h)
dev.off()
#Weight over recent time
ggplot(weight2, aes(Index,Weight)) +
geom_point(colour = "blue", size = 3) +
geom_smooth(method=loess, colour = "darkgreen") +
ggtitle("Weight") +
ylim(85,98)
#Weight over longer time
ggplot(weight1, aes(Index,Weight)) +
geom_point(colour = "blue", size = 2) +
geom_smooth(colour = "darkgreen") +
ggtitle("Weight") +
ylim(85,105)
colors = c(rep("cornflowerblue",9),rep("limegreen",1))
boxplot(Weight ~ Year,
data = weight3,
col = colors)
abline(h=94, lty=2, col="red")
#Waist to Hip Ratio
ggplot(weight5[2400:nrow(weight5),], aes(x = Index, y = w2h)) +
geom_point() +
geom_smooth(colour = "darkgreen") +
ggtitle("Waist to Hip Ratio")
#BMI
ggplot(weight5[2000:nrow(weight5),], aes(x = Index, y = BMI)) +
geom_point() +
geom_smooth(colour = "blue") +
ggtitle("BMI") +
geom_abline(slope=0, intercept=25, lty=2, col="red")
tail(weight3)
install.packages("lubridate")
install.packages("lubridate")
library(readxl)
weight <- read_excel("Healthcheck.xlsx", sheet=1)
#weight <- read.csv("Healthcheck.csv", header = TRUE)
weight1 <- weight[,c(1,8)]
weight1 <- na.omit(weight1)
weight2 <- weight1[1400:nrow(weight1),]
weight3 <- weight[,c(4,8)]
weight3 <- na.omit(weight3)
weight4 <-weight[,c(1,8:10)]
height <- 1.89
BMI <- (weight4$Weight)/(height^2)
w2h <- weight4$Waist/weight4$Hips
weight5 <- cbind(weight4, BMI,w2h)
dev.off()
#Weight over recent time
ggplot(weight2, aes(Index,Weight)) +
geom_point(colour = "blue", size = 3) +
geom_smooth(method=loess, colour = "darkgreen") +
ggtitle("Weight") +
ylim(85,98)
#Weight over longer time
ggplot(weight1, aes(Index,Weight)) +
geom_point(colour = "blue", size = 2) +
geom_smooth(colour = "darkgreen") +
ggtitle("Weight") +
ylim(85,105)
colors = c(rep("cornflowerblue",9),rep("limegreen",1))
boxplot(Weight ~ Year,
data = weight3,
col = colors)
abline(h=94, lty=2, col="red")
#Waist to Hip Ratio
ggplot(weight5[2400:nrow(weight5),], aes(x = Index, y = w2h)) +
geom_point() +
geom_smooth(colour = "darkgreen") +
ggtitle("Waist to Hip Ratio")
#BMI
ggplot(weight5[2000:nrow(weight5),], aes(x = Index, y = BMI)) +
geom_point() +
geom_smooth(colour = "blue") +
ggtitle("BMI") +
geom_abline(slope=0, intercept=25, lty=2, col="red")
library(ggplot2)
library(ggplot2)
library(readxl)
weight <- read_excel("Healthcheck.xlsx", sheet=1)
#weight <- read.csv("Healthcheck.csv", header = TRUE)
weight1 <- weight[,c(1,8)]
weight1 <- na.omit(weight1)
weight2 <- weight1[1400:nrow(weight1),]
weight3 <- weight[,c(4,8)]
weight3 <- na.omit(weight3)
weight4 <-weight[,c(1,8:10)]
height <- 1.89
BMI <- (weight4$Weight)/(height^2)
w2h <- weight4$Waist/weight4$Hips
weight5 <- cbind(weight4, BMI,w2h)
dev.off()
#Weight over recent time
ggplot(weight2, aes(Index,Weight)) +
geom_point(colour = "blue", size = 3) +
geom_smooth(method=loess, colour = "darkgreen") +
ggtitle("Weight") +
ylim(85,98)
#Weight over longer time
ggplot(weight1, aes(Index,Weight)) +
geom_point(colour = "blue", size = 2) +
geom_smooth(colour = "darkgreen") +
ggtitle("Weight") +
ylim(85,105)
colors = c(rep("cornflowerblue",9),rep("limegreen",1))
boxplot(Weight ~ Year,
data = weight3,
col = colors)
abline(h=94, lty=2, col="red")
#Waist to Hip Ratio
ggplot(weight5[2400:nrow(weight5),], aes(x = Index, y = w2h)) +
geom_point() +
geom_smooth(colour = "darkgreen") +
ggtitle("Waist to Hip Ratio")
#BMI
ggplot(weight5[2000:nrow(weight5),], aes(x = Index, y = BMI)) +
geom_point() +
geom_smooth(colour = "blue") +
ggtitle("BMI") +
geom_abline(slope=0, intercept=25, lty=2, col="red")
ww <- read.csv("w2w.csv", as.is= TRUE, header=TRUE)
library(ggplot2)
ww$Waist <- sapply(ww$Waist, as.numeric)
fit <- lm(ww$Waist~ww$Weight)
summary(fit)
ggplot(ww, aes(x=Waist, y=Weight)) +
geom_point(color="blue",size=4, alpha=0.25) +
geom_smooth(method=lm)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(xlsx)
#data <- read.csv("BP.csv", as.is=TRUE, header=TRUE, skip=18)
data <- read.xlsx("Healthcheck.xlsx",2, startRow=19, header=TRUE)
data1 <- select(data, Date, Temp.1, Temp.2, Temp.3)%>%
mutate(Temp.1 = as.numeric(as.character(Temp.1)),
Temp.2 = as.numeric(as.character(Temp.2)),
Temp.3 = as.numeric(as.character(Temp.3)))%>%
mutate(Ave.Temp = (Temp.1 + Temp.2 + Temp.3)/3)%>%
na.omit
data1$Date <- ymd(data1$Date)
data3 <- gather(data1, Type, Reading, -Date)
plot <- ggplot(data3, aes(Date, Reading, colour = Type)) +
geom_point(size=4, shape=21) +
geom_smooth(lwd=1) +
scale_colour_brewer(palette="Set1") +
theme_bw() +
theme(panel.grid.major = element_line(size = 0.5, color = "grey"),
axis.line = element_line(size = 0.7, color = "black"),
text = element_text(size = 14))
plot
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(xlsx)
#data <- read.csv("BP.csv", as.is=TRUE, header=TRUE, skip=18)
data <- read.xlsx("Healthcheck.xlsx",2, startRow=19, header=TRUE)
data1 <- select(data, Date, Temp.1, Temp.2, Temp.3)%>%
mutate(Temp.1 = as.numeric(as.character(Temp.1)),
Temp.2 = as.numeric(as.character(Temp.2)),
Temp.3 = as.numeric(as.character(Temp.3)))%>%
mutate(Ave.Temp = (Temp.1 + Temp.2 + Temp.3)/3)%>%
na.omit
data1$Date <- ymd(data1$Date)
data3 <- gather(data1, Type, Reading, -Date)
plot <- ggplot(data3, aes(Date, Reading, colour = Type)) +
geom_point(size=4, shape=21) +
geom_smooth(lwd=1) +
scale_colour_brewer(palette="Set1") +
theme_bw() +
theme(panel.grid.major = element_line(size = 0.5, color = "grey"),
axis.line = element_line(size = 0.7, color = "black"),
text = element_text(size = 14))
plot
data <- read.xlsx("Healthcheck.xlsx",2, startRow=19, header=TRUE)
tail(data)
data1 <- select(data, Date, Temp.1, Temp.2, Temp.3)%>%
mutate(Temp.1 = as.numeric(as.character(Temp.1)),
Temp.2 = as.numeric(as.character(Temp.2)),
Temp.3 = as.numeric(as.character(Temp.3)))%>%
mutate(Ave.Temp = (Temp.1 + Temp.2 + Temp.3)/3)%>%
na.omit
tail(data1)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(xlsx)
#data <- read.csv("BP.csv", as.is=TRUE, header=TRUE, skip=18)
data <- read.xlsx("Healthcheck.xlsx",2, startRow=19, header=TRUE)
data1 <- select(data, Date, Temp.1, Temp.2, Temp.3)%>%
mutate(Temp.1 = as.numeric(as.character(Temp.1)),
Temp.2 = as.numeric(as.character(Temp.2)),
Temp.3 = as.numeric(as.character(Temp.3)))%>%
mutate(Ave.Temp = (Temp.1 + Temp.2 + Temp.3)/3)%>%
na.omit
data1$Date <- ymd(data1$Date)
data3 <- gather(data1, Type, Reading, -Date)
plot <- ggplot(data3, aes(Date, Reading, colour = Type)) +
geom_point(size=4, shape=21) +
geom_smooth(lwd=1) +
scale_colour_brewer(palette="Set1") +
theme_bw() +
theme(panel.grid.major = element_line(size = 0.5, color = "grey"),
axis.line = element_line(size = 0.7, color = "black"),
text = element_text(size = 14))
plot
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(xlsx)
#data <- read.csv("BP.csv", as.is=TRUE, header=TRUE, skip=18)
data <- read.xlsx("Healthcheck.xlsx",2, startRow=19, header=TRUE)
data1 <- select(data, Date, Temp.1, Temp.2, Temp.3)%>%
mutate(Temp.1 = as.numeric(as.character(Temp.1)),
Temp.2 = as.numeric(as.character(Temp.2)),
Temp.3 = as.numeric(as.character(Temp.3)))%>%
mutate(Ave.Temp = (Temp.1 + Temp.2 + Temp.3)/3)%>%
na.omit
data1$Date <- ymd(data1$Date)
data3 <- gather(data1, Type, Reading, -Date)
plot <- ggplot(data3, aes(Date, Reading, colour = Type)) +
geom_point(size=4, shape=21) +
geom_smooth(lwd=1) +
scale_colour_brewer(palette="Set1") +
theme_bw() +
theme(panel.grid.major = element_line(size = 0.5, color = "grey"),
axis.line = element_line(size = 0.7, color = "black"),
text = element_text(size = 14))
plot
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(xlsx)
#data <- read.csv("BP.csv", as.is=TRUE, header=TRUE, skip=18)
data <- read.xlsx("Healthcheck.xlsx",2, startRow=19, header=TRUE)
data1 <- select(data, everything())%>%
mutate(Systolic = as.numeric(as.character(A)),
Diastolic = as.numeric(as.character(B)))%>%
na.omit
data2 <- data1[,c(1,16,17)]
data2$Date <- ymd(data2$Date)
data3 <- gather(data2, Type, Reading, -Date)
plot <- ggplot(data3, aes(Date, Reading, colour = Type)) +
geom_point(size=4, shape=21) +
geom_smooth(lwd=1) +
scale_colour_brewer(palette="Set1") +
theme_bw() +
theme(panel.grid.major = element_line(size = 0.5, color = "grey"),
axis.line = element_line(size = 0.7, color = "black"),
text = element_text(size = 14))
plot
